{"version":3,"file":"/serviceWorker.js","mappings":";sQACA,q6OAIAA,KAAKC,iBAAiB,WAAW,SAACC,GAE9BF,KAAKG,aACR,IAGDH,KAAKC,iBAAiB,SAAS,SAACC,GAE/B,IAGDF,KAAKC,iBAAiB,QAAQ,SAACC,GAI3B,GAAMF,KAAKI,cAAiD,YAAjCJ,KAAKI,aAAaC,YAKzCH,EAAEI,KAAM,OACJC,EAAML,EAAEI,KAAKE,OACjBC,QAAQC,IAAIH,GACZL,EAAES,UAAUX,KAAKY,aAAaC,iBAAiBN,EAAIO,MAAO,CACtDC,KAAMR,EAAIQ,KACVC,KAAMT,EAAIS,KACVC,QAASV,EAAIU,QACbX,KAAI,UAAEC,EAAID,YAAN,QAAc,OAEzB,CACJ,IACDN,KAAKC,iBAAiB,qBAAqB,SAASiB,SAChDA,EAAMC,aAAaC,QACnBX,QAAQC,IAAI,2BAIZQ,EAAMP,aAAU,UAAC,iHAGO,MAFhBU,EAAeH,EAAMI,QADZ,wBAILC,EAAY,IAAIC,IAAIH,GACxBZ,QAAQC,IAAIa,GALH,SAMgBE,QAAQC,SAAS,CACtCC,qBAAqB,IAPhB,OAMHC,EANG,WAWYA,GAXZ,6DAWEC,EAXF,QAYCC,EAAM,IAAIN,IAAIK,EAAOC,KAC3BrB,QAAQC,IAAIoB,GAETA,EAAIC,WAAaR,EAAUQ,SAfzB,0CAgBMF,EAAOG,SAhBb,gJAoBTP,QAAQQ,WAAWV,EAAUQ,UApBpB,4BAqBHb,EAAMC,aAAab,KArBhB,qBAsBNY,EAAMC,aAAab,KAAKwB,IAtBlB,wBAuBLP,UAAY,IAAIC,IAAIN,EAAMC,aAAab,KAAKwB,KAvBvC,UAwBoBL,QAAQC,SAAS,CACtCC,qBAAqB,IAzBpB,QAwBCC,EAxBD,WA6BgBA,GA7BhB,8DA6BMC,EA7BN,SA8BKC,EAAM,IAAIN,IAAIK,EAAOC,MACpBC,WAAaR,UAAUQ,SA/B7B,0CAgCUF,EAAOG,SAhCjB,WAkCOE,EAAYJ,EAAIC,SAAUI,MAAM,KAChCC,EAAkBb,UAAUQ,SAAUI,MAAM,KAE7CD,EAAS,KAAOE,EAAe,GArCrC,0CAsCcP,EAAOQ,SAASd,UAAUQ,UAAUO,MAAK,SAAAT,GAAM,OAAIA,EAAOG,OAAX,KAtC7D,iJA2CLP,QAAQQ,WAAWV,UAAUQ,UA3CxB,8PA+CpB,IAAE","sources":["webpack:///./resources/js/serviceWorker.js"],"sourcesContent":["const cacheName = 'spentra-pwa-v1';\r\nconst appShellFiles = [];\r\nconst contentToCache = appShellFiles;\r\n\r\n// Install Service Worker\r\nself.addEventListener('install', (e) => {\r\n    // console.log(\"===== Installed =====\");\r\n    self.skipWaiting();\r\n});\r\n\r\n// Fetch Asset\r\nself.addEventListener('fetch', (e) => {\r\n    // console.log(\"===== Fetch =====\");\r\n});\r\n\r\n// Push Notification\r\nself.addEventListener('push', (e) => {\r\n    // console.log('===== SW Push Add Event Listener =====');\r\n    // console.log(e);\r\n    // console.log(e.data);\r\n    if (!(self.Notification && self.Notification.permission === 'granted')) {\r\n        //notifications aren't supported or permission not granted!\r\n        return;\r\n    }\r\n\r\n    if (e.data) {\r\n        var msg = e.data.json();\r\n        console.log(msg);\r\n        e.waitUntil(self.registration.showNotification(msg.title, {\r\n            body: msg.body,\r\n            icon: msg.icon,\r\n            actions: msg.actions,\r\n            data: msg.data ?? null\r\n        }));\r\n    }\r\n}); \r\nself.addEventListener('notificationclick', function(event) {\r\n    event.notification.close();\r\n    console.log(\"Notification is clicked\");\r\n    // console.log(event);\r\n    // clients.openWindow(`${baseUrl}/${event.action}`);\r\n\r\n    event.waitUntil((async () => {\r\n        let actionTarget = event.action;\r\n\r\n        if(actionTarget !== ''){\r\n            let actionUrl = new URL(actionTarget);\r\n            console.log(actionUrl);\r\n            const allClients = await clients.matchAll({\r\n                includeUncontrolled: true\r\n            });\r\n\r\n            // Let's see if we already have a chat window open:\r\n            for (const client of allClients) {\r\n                const url = new URL(client.url);\r\n                console.log(url);\r\n        \r\n                if(url.pathname === actionUrl.pathname){\r\n                    return client.focus();\r\n                }\r\n            }\r\n\r\n            clients.openWindow(actionUrl.pathname);\r\n        } else if(event.notification.data){\r\n            if(event.notification.data.url){\r\n                actionUrl = new URL(event.notification.data.url);\r\n                const allClients = await clients.matchAll({\r\n                    includeUncontrolled: true\r\n                });\r\n    \r\n                // Let's see if we already have a chat window open:\r\n                for (const client of allClients) {\r\n                    const url = new URL(client.url);\r\n                    if(url.pathname === actionUrl.pathname){\r\n                        return client.focus();\r\n                    } else {\r\n                        let splitUrl = (url.pathname).split('/');\r\n                        let splitTargetUrl = (actionUrl.pathname).split('/');\r\n\r\n                        if(splitUrl[1] === splitTargetUrl[1]){\r\n                            return client.navigate(actionUrl.pathname).then(client => client.focus());\r\n                        }\r\n                    }\r\n                }\r\n    \r\n                clients.openWindow(actionUrl.pathname);\r\n            }\r\n        }\r\n    })());\r\n}, false);"],"names":["self","addEventListener","e","skipWaiting","Notification","permission","data","msg","json","console","log","waitUntil","registration","showNotification","title","body","icon","actions","event","notification","close","actionTarget","action","actionUrl","URL","clients","matchAll","includeUncontrolled","allClients","client","url","pathname","focus","openWindow","splitUrl","split","splitTargetUrl","navigate","then"],"sourceRoot":""}