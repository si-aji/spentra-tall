/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/plugins/nestable/script.js":
/*!*************************************************!*\
  !*** ./resources/js/plugins/nestable/script.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/index */ \"./resources/js/plugins/nestable/src/index.js\");\n// Default SortableJS\n\nwindow.Nestable = _src_index__WEBPACK_IMPORTED_MODULE_0__[\"default\"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvcGx1Z2lucy9uZXN0YWJsZS9zY3JpcHQuanMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0FDLE1BQU0sQ0FBQ0QsUUFBUCxHQUFrQkEsa0RBQWxCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL3BsdWdpbnMvbmVzdGFibGUvc2NyaXB0LmpzPzVmMzIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRGVmYXVsdCBTb3J0YWJsZUpTXG5pbXBvcnQgTmVzdGFibGUgZnJvbSAnLi9zcmMvaW5kZXgnO1xud2luZG93Lk5lc3RhYmxlID0gTmVzdGFibGU7Il0sIm5hbWVzIjpbIk5lc3RhYmxlIiwid2luZG93Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/plugins/nestable/script.js\n");

/***/ }),

/***/ "./resources/js/plugins/nestable/src/index.js":
/*!****************************************************!*\
  !*** ./resources/js/plugins/nestable/src/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Nestable)\n/* harmony export */ });\n/* harmony import */ var _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/DOM.js */ \"./resources/js/plugins/nestable/src/utils/DOM.js\");\n/* harmony import */ var _utils_Emitter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/Emitter.js */ \"./resources/js/plugins/nestable/src/utils/Emitter.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\nvar Nestable = /*#__PURE__*/function (_Emitter) {\n  _inherits(Nestable, _Emitter);\n\n  var _super = _createSuper(Nestable);\n\n  function Nestable(list, options) {\n    var _this;\n\n    _classCallCheck(this, Nestable);\n\n    _this = _super.call(this);\n    _this.defaultConfig = {\n      threshold: 40,\n      animation: 0,\n      collapseButtonContent: \"â€“\",\n      expandButtonContent: \"+\",\n      includeContent: false,\n      maxDepth: 3,\n      showPlaceholderOnMove: false,\n      nodes: {\n        list: \"ol\",\n        item: \"li\"\n      },\n      classes: {\n        list: \"nst-list\",\n        item: \"nst-item\",\n        content: \"nst-content\",\n        parent: \"nst-parent\",\n        dragging: \"nst-dragging\",\n        handle: \"nst-handle\",\n        placeholder: \"nst-placeholder\",\n        container: \"nst-container\",\n        button: \"nst-button\",\n        collapsed: \"nst-collapsed\",\n        disabled: \"nst-disabled\",\n        error: \"nst-error\",\n        moving: \"nst-moving\"\n      }\n    };\n    _this.config = Object.assign({}, _this.defaultConfig, options);\n\n    if (options) {\n      if (options.nodes) {\n        _this.config.nodes = Object.assign({}, _this.defaultConfig.nodes, options.nodes);\n      }\n\n      if (options.classes) {\n        _this.config.classes = Object.assign({}, _this.defaultConfig.classes, options.classes);\n      }\n    }\n\n    _this.parent = typeof list === \"string\" ? _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(list) : list;\n\n    if (!_this.parent) {\n      return _possibleConstructorReturn(_this, console.error(\"Node (\".concat(list, \") not found.\")));\n    }\n\n    if (_this.parent._nestable) {\n      return _possibleConstructorReturn(_this, console.error(\"There is already a Nestable instance active on this node.\"));\n    }\n\n    _this.initialised = false;\n    _this.disabled = true;\n    _this.last = {\n      x: 0,\n      y: 0\n    };\n\n    _this.init();\n\n    return _this;\n  }\n\n  _createClass(Nestable, [{\n    key: \"init\",\n    value: function init(options) {\n      var _this2 = this;\n\n      if (!this.initialised) {\n        this.touch = \"ontouchstart\" in window || window.DocumentTouch && document instanceof DocumentTouch;\n\n        if (options) {\n          this.config = Object.assign({}, this.defaultConfig, options);\n        }\n\n        this.dragDepth = 0;\n        this.parent.classList.add(this.config.classes.list);\n        this.parent.classList.add(this.config.classes.parent);\n        var items = _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].children(this.parent, this.config.nodes.item);\n\n        var _iterator = _createForOfIteratorHelper(items),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var item = _step.value;\n\n            this._nest(item);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this.placeholder = document.createElement(this.config.nodes.item);\n        this.placeholder.classList.add(this.config.classes.placeholder);\n\n        this._getData();\n\n        this.parent._nestable = this;\n\n        if (!window._nestableInstances) {\n          window._nestableInstances = 1;\n          this.id = 1;\n        } else {\n          window._nestableInstances += 1;\n          this.id = window._nestableInstances;\n        }\n\n        this.enable();\n\n        this._getData();\n\n        setTimeout(function () {\n          _this2.emit(\"init\");\n        }, 10);\n        this.initialised = true;\n\n        if (this.config.data) {\n          var req = new XMLHttpRequest();\n          req.responseType = 'json';\n          req.open('GET', this.config.data, true);\n\n          req.onload = function () {\n            _this2.load(req);\n          };\n\n          req.send(null);\n        }\n      }\n    }\n  }, {\n    key: \"load\",\n    value: function load(data) {\n      var _this3 = this;\n\n      this.removeAll();\n\n      if (\"response\" in data) {\n        data = data.response;\n      }\n\n      var nest = function nest(item) {\n        var el = document.createElement(_this3.config.nodes.item);\n        el.textContent = item.content;\n\n        if (item.children) {\n          var list = document.createElement(_this3.config.nodes.list);\n          el.appendChild(list);\n\n          var _iterator2 = _createForOfIteratorHelper(item.children),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var child = _step2.value;\n              list.appendChild(nest(child));\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n\n        return el;\n      };\n\n      var _iterator3 = _createForOfIteratorHelper(data),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var item = _step3.value;\n\n          this._nest(this.parent.appendChild(nest(item)));\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      this.emit(\"loaded\");\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this4 = this;\n\n      if (this.initialised) {\n        this.initialised = false;\n        this.disable();\n        this.parent.classList.remove(this.config.classes.list);\n        this.parent.classList.remove(this.config.classes.parent);\n        delete this.parent._nestable;\n\n        if (window._nestableInstances) {\n          window._nestableInstances -= 1;\n        }\n\n        var destroyItem = function destroyItem(item) {\n          item.classList.remove(_this4.config.classes.item);\n          item.classList.remove(_this4.config.classes.collapsed);\n          var listEl = item.querySelector(_this4.config.nodes.list);\n          var contentEl = item.querySelector(\".\".concat(_this4.config.classes.content));\n          var handleEl = item.querySelector(\".\".concat(_this4.config.classes.handle));\n          var buttonEl = item.querySelector(\".\".concat(_this4.config.classes.button)); // default handle is also the content container\n\n          var defaultHandle = contentEl.classList.contains(_this4.config.classes.handle);\n          var div = document.createDocumentFragment();\n\n          for (var i = contentEl.childNodes.length - 1; i >= 0; i--) {\n            div.insertBefore(contentEl.childNodes[i], div.firstChild);\n          }\n\n          item.insertBefore(div, contentEl);\n          item.removeChild(contentEl);\n\n          if (listEl) {\n            listEl.classList.remove(_this4.config.classes.list);\n            item.removeChild(buttonEl);\n\n            var _items = _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].children(listEl, _this4.config.nodes.item);\n\n            var _iterator4 = _createForOfIteratorHelper(_items),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var _item = _step4.value;\n                destroyItem(_item);\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          }\n        };\n\n        var items = _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].children(this.parent, this.config.nodes.item);\n\n        var _iterator5 = _createForOfIteratorHelper(items),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var item = _step5.value;\n            destroyItem(item);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n\n        this.emit(\"destroy\", this.parent);\n      }\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      this.events = {\n        start: this._onMouseDown.bind(this),\n        move: this._onMouseMove.bind(this),\n        end: this._onMouseUp.bind(this)\n      };\n\n      if (this.touch) {\n        this.parent.addEventListener(\"touchstart\", this.events.start, false);\n        document.addEventListener(\"touchmove\", this.events.move, false);\n        document.addEventListener(\"touchend\", this.events.end, false);\n        document.addEventListener(\"touchcancel\", this.events.end, false);\n      } else {\n        this.parent.addEventListener(\"mousedown\", this.events.start, false);\n        document.addEventListener(\"mousemove\", this.events.move, false);\n        document.addEventListener(\"mouseup\", this.events.end, false);\n      }\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      this.parent.removeEventListener(\"mousedown\", this.events.start);\n      document.removeEventListener(\"mousemove\", this.events.move);\n      document.removeEventListener(\"mouseup\", this.events.end);\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      if (this.disabled) {\n        this.bind();\n        this.parent.classList.remove(this.config.classes.disabled);\n        this.disabled = false;\n      }\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (!this.disabled) {\n        this.unbind();\n        this.parent.classList.add(this.config.classes.disabled);\n        this.disabled = true;\n      }\n    }\n  }, {\n    key: \"serialise\",\n    value: function serialise() {\n      this.serialize();\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return this._getData(\"data\");\n    }\n  }, {\n    key: \"collapseAll\",\n    value: function collapseAll() {\n      var items = _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].selectAll(\".\".concat(this.config.classes.item), this.parent);\n\n      var _iterator6 = _createForOfIteratorHelper(items),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var item = _step6.value;\n\n          if (!item.classList.contains(this.config.classes.collapsed)) {\n            var btn = item.querySelector(\".\".concat(this.config.classes.button));\n\n            if (btn) {\n              this._collapseList(item, btn);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"expandAll\",\n    value: function expandAll() {\n      var items = _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].selectAll(\".\".concat(this.config.classes.item), this.parent);\n\n      var _iterator7 = _createForOfIteratorHelper(items),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var item = _step7.value;\n\n          if (item.classList.contains(this.config.classes.collapsed)) {\n            var btn = item.querySelector(\".\".concat(this.config.classes.button));\n\n            if (btn) {\n              this._expandList(item, btn);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }, {\n    key: \"add\",\n    value: function add(element, parent) {\n      if (!parent) {\n        parent = this.parent;\n      }\n\n      this._nest(element);\n\n      if (parent !== this.parent) {\n        var listEl = _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this.config.nodes.list, parent);\n\n        if (!listEl) {\n          parent = this._makeParent(parent);\n        } else {\n          parent = listEl;\n        }\n      }\n\n      parent.appendChild(element);\n      this.update();\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(element) {\n      var removeChildElements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var parentEl = element.closest(this.config.nodes.list);\n\n      if (!removeChildElements) {\n        var childList = element.querySelector(\".\".concat(this.config.classes.list));\n\n        if (childList) {\n          var childElements = _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].children(childList, this.config.nodes.item);\n\n          if (childElements.length) {\n            var frag = document.createDocumentFragment();\n\n            for (var i = childElements.length - 1; i >= 0; i--) {\n              var childElement = childElements[i];\n              frag.insertBefore(childElement, frag.firstElementChild);\n            }\n\n            parentEl.replaceChild(frag, element);\n          }\n        }\n      } else {\n        parentEl.removeChild(element);\n      }\n\n      this.update();\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      var nodes = this.parent.children;\n\n      for (var i = nodes.length - 1; i >= 0; i--) {\n        this.parent.removeChild(nodes[i]);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this._getData(\"nodes\");\n\n      this.emit(\"update\");\n    }\n  }, {\n    key: \"_nest\",\n    value: function _nest(el) {\n      var handle = el.querySelector(\".\".concat(this.config.classes.handle));\n      var content = document.createElement(\"div\");\n      content.classList.add(this.config.classes.content);\n      var nodes = el.childNodes;\n\n      if (!handle) {\n        content.classList.add(this.config.classes.handle);\n\n        for (var i = nodes.length - 1; i >= 0; i--) {\n          var node = nodes[i];\n\n          if (node.nodeName.toLowerCase() !== this.config.nodes.list) {\n            content.insertBefore(node, content.firstChild);\n          }\n        }\n      } else {\n        for (var i = nodes.length - 1; i >= 0; i--) {\n          var _node = nodes[i];\n\n          if (_node !== handle && _node.nodeName.toLowerCase() !== this.config.nodes.list) {\n            content.insertBefore(_node, content.firstChild);\n          }\n        }\n      }\n\n      el.classList.add(this.config.classes.item);\n      var list = el.querySelector(this.config.nodes.list);\n\n      if (list) {\n        el.insertBefore(content, list);\n\n        var parent = this._makeParent(el);\n\n        var items = _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].children(parent, this.config.nodes.item);\n\n        if (el.classList.contains(this.config.classes.collapsed)) {\n          this._collapseList(el);\n        }\n\n        var _iterator8 = _createForOfIteratorHelper(items),\n            _step8;\n\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var _i = _step8.value;\n\n            this._nest(_i);\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n      } else {\n        el.appendChild(content);\n      }\n    }\n  }, {\n    key: \"_isDisabled\",\n    value: function _isDisabled(item) {\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"disabled\";\n\n      if (item === null) {\n        return false;\n      } // item has the [data-nestable-disabled] attribute\n\n\n      if (\"nestableDisabled\" in item.dataset) {\n        if (type === \"disabled\" && (!item.dataset.nestableDisabled.length || item.dataset.nestableDisabled === \"disabled\") || type === \"dragging\" && item.dataset.nestableDisabled === \"dragging\" || type === \"nesting\" && item.dataset.nestableDisabled === \"nesting\") {\n          return true;\n        }\n      }\n\n      if (item.classList.contains(this.config.classes.disabled)) {\n        return true;\n      }\n\n      var listEls = _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parents(item, \".\".concat(this.config.classes.disabled));\n\n      if (listEls.length) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Get mouse / touch event\n     * @return {Object}\n     */\n\n  }, {\n    key: \"_getEvent\",\n    value: function _getEvent(e) {\n      if (this.touch) {\n        if (e.type === \"touchend\") {\n          return e.changedTouches[0];\n        }\n\n        return e.touches[0];\n      }\n\n      return e;\n    }\n  }, {\n    key: \"_onMouseDown\",\n    value: function _onMouseDown(e) {\n      var evt = this._getEvent(e);\n\n      var button = e.target.closest(\".\".concat(this.config.classes.button));\n      var item = e.target.closest(\".\".concat(this.config.classes.item));\n\n      if (button) {\n        return this._toggleList(item, button);\n      }\n\n      var handle = e.target.closest(\".\".concat(this.config.classes.handle));\n\n      if (!handle) {\n        return false;\n      }\n\n      if (item) {\n        if (this._isDisabled(item) || this._isDisabled(item.parentNode.closest(\".\".concat(this.config.classes.item)))) {\n          return false;\n        }\n\n        if (this._isDisabled(item, \"dragging\")) {\n          this.emit(\"error.dragging.disabled\", item);\n          return false;\n        }\n\n        e.preventDefault();\n        this.parent.classList.add(this.config.classes.moving);\n        item.classList.add(this.config.classes.dragging);\n        var rect = _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rect(item);\n        this.origin = {\n          x: evt.pageX,\n          y: evt.pageY,\n          original: {\n            x: evt.pageX,\n            y: evt.pageY\n          }\n        };\n        this.hierarchy = {\n          movedNode: item,\n          originalParent: item.parentNode,\n          originalParentItem: item.parentNode.closest(\".\".concat(this.config.classes.item))\n        };\n        this.active = {\n          maxDepth: false,\n          collapsedParent: false,\n          disabledParent: false,\n          confinedParent: false,\n          node: item,\n          rect: rect,\n          parent: false,\n          axis: false\n        }; // item has the [data-nestable-parent] attribute\n\n        if (\"nestableParent\" in item.dataset) {\n          var parent = document.getElementById(item.dataset.nestableParent);\n\n          if (parent) {\n            this.active.parent = parent;\n          }\n        } // item has the [data-nestable-axis] attribute\n\n\n        if (\"nestableAxis\" in item.dataset) {\n          var axis = item.dataset.nestableAxis;\n\n          if (axis === \"x\") {\n            this.active.axis = \"x\";\n          } else if (axis === \"y\") {\n            this.active.axis = \"y\";\n          }\n        }\n\n        this.placeholder.style.height = \"\".concat(rect.height, \"px\"); // this.placeholder.style.width = `${rect.width}px`;\n\n        if (this.config.showPlaceholderOnMove) {\n          this.placeholder.style.opacity = 0;\n        }\n\n        if (!this.container) {\n          this.container = document.createElement(this.config.nodes.list);\n          this.container.classList.add(this.config.classes.list);\n          this.container.classList.add(this.config.classes.container);\n          this.container.id = \"nestable_\".concat(this.id);\n        }\n\n        this.container.style.left = \"\".concat(rect.left, \"px\");\n        this.container.style.top = \"\".concat(rect.top, \"px\");\n        this.container.style.height = \"\".concat(rect.height, \"px\");\n        this.container.style.width = \"\".concat(rect.width, \"px\");\n        item.parentNode.insertBefore(this.placeholder, item);\n        document.body.appendChild(this.container);\n        this.container.appendChild(item);\n        this.newParent = false;\n        this.dragDepth = 0; // total depth of dragging item\n\n        var items = _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].selectAll(this.config.nodes.item, item);\n\n        for (var i = 0; i < items.length; i++) {\n          var depth = _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parents(items[i], this.config.nodes.list).length - 1;\n\n          if (depth > this.dragDepth) {\n            this.dragDepth = depth;\n          }\n        }\n\n        this.emit(\"start\", this.active);\n      }\n    }\n  }, {\n    key: \"_onMouseMove\",\n    value: function _onMouseMove(e) {\n      if (this.active) {\n        if (this.config.showPlaceholderOnMove) {\n          this.placeholder.style.opacity = 1;\n        }\n\n        e = this._getEvent(e);\n        var x = e.pageX - this.origin.x;\n        var y = e.pageY - this.origin.y;\n\n        if (e.pageY > this.last.y) {\n          this.last.dirY = 1;\n        } else if (e.pageY < this.last.y) {\n          this.last.dirY = -1;\n        }\n\n        if (e.pageX > this.last.x) {\n          this.last.dirX = 1;\n        } else if (e.pageX < this.last.x) {\n          this.last.dirX = -1;\n        }\n\n        var movement = false;\n\n        if (Math.abs(x) > Math.abs(y)) {\n          movement = \"x\";\n        } else if (Math.abs(x) < Math.abs(y)) {\n          movement = \"y\";\n        }\n\n        var scrollTop = window.pageYOffset !== undefined ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n        var elements = document.elementsFromPoint(e.pageX, e.pageY - scrollTop);\n\n        if (movement === \"x\" && this.active.axis !== \"y\") {\n          if (this.last.dirX > 0 && x > this.config.threshold) {\n            // moving right\t\t\t\t\n            var prevEl = this.placeholder.previousElementSibling;\n\n            if (prevEl) {\n              if (prevEl.classList.contains(this.config.classes.collapsed)) {\n                if (!this.active.collapsedParent) {\n                  this.emit(\"error.collapsed\", this.active.node, prevEl);\n                  this.active.collapsedParent = true;\n                }\n              } else {\n                var disabled = this._isDisabled(prevEl);\n\n                var cantNest = this._isDisabled(prevEl, \"nesting\");\n\n                if (!disabled) {\n                  var depth = _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parents(this.placeholder, this.config.nodes.list).length;\n                  var allowNesting = depth + this.dragDepth <= this.config.maxDepth;\n                  var parentEl = prevEl.querySelector(this.config.nodes.list);\n\n                  if (cantNest) {\n                    if (!this.active.nestDisabled) {\n                      this.emit(\"error.nesting.disabled\", this.active.node);\n                      this.active.nestDisabled = true;\n                    }\n                  } else {\n                    if (allowNesting) {\n                      this.active.maxDepth = false;\n                      var oldParent = this.placeholder.closest(\".\".concat(this.config.classes.list));\n\n                      if (!parentEl) {\n                        parentEl = this._makeParent(prevEl);\n                      }\n\n                      this._moveElement(this.placeholder, {\n                        parent: parentEl,\n                        type: \"appendChild\"\n                      });\n\n                      this.emit(\"nest\", parentEl, oldParent);\n                      this.origin.x = e.pageX;\n                    } else {\n                      if (!this.active.maxDepth) {\n                        this.emit(\"error.maxdepth\", this.active.node, this.config.maxDepth);\n                        this.active.maxDepth = true;\n                      }\n                    }\n                  }\n                } else {\n                  if (!this.active.disabledParent) {\n                    this.emit(\"error.disabled\");\n                    this.active.disabledParent = true;\n                  }\n                }\n              }\n            }\n          } else if (this.last.dirX < 0 && x < -this.config.threshold) {\n            // moving left\n            this.active.maxDepth = false;\n            this.active.nestDisabled = false;\n            this.active.disabledParent = false;\n            this.active.collapsedParent = false; // this.active.confinedParent = false;\n\n            var listEl = this.placeholder.closest(this.config.nodes.list);\n\n            var _parentEl = listEl.closest(this.config.nodes.item);\n\n            if (_parentEl && (listEl.childElementCount > 1 && this.placeholder !== listEl.firstElementChild || listEl.childElementCount < 2 && this.placeholder === listEl.firstElementChild)) {\n              var nextEl = _parentEl.nextElementSibling;\n\n              var _oldParent = this.placeholder.closest(\".\".concat(this.config.classes.list));\n\n              if (nextEl) {\n                var list = nextEl.closest(this.config.nodes.list);\n\n                this._moveElement(this.placeholder, {\n                  parent: list,\n                  type: \"insertBefore\",\n                  sibling: nextEl\n                });\n\n                this.origin.x = e.pageX;\n              } else {\n                this._moveElement(this.placeholder, {\n                  parent: _parentEl.closest(this.config.nodes.list),\n                  type: \"appendChild\"\n                });\n\n                this.origin.x = e.pageX;\n              }\n\n              this.emit(\"unnest\", _parentEl, _oldParent);\n            }\n          }\n        } else {\n          // check if we're over a valid item\n          var _iterator9 = _createForOfIteratorHelper(elements),\n              _step9;\n\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var element = _step9.value;\n              var moveY = element !== this.active.node && !this.active.node.contains(element) && element.classList.contains(this.config.classes.content) && this.active.axis !== \"x\";\n\n              if (moveY) {\n                var item = element.closest(\".\".concat(this.config.classes.item));\n\n                if (item) {\n                  if (movement === \"y\") {\n                    var childListEl = item.querySelector(this.config.nodes.list);\n\n                    if (childListEl && !item.classList.contains(this.config.classes.collapsed)) {\n                      // item is parent\n                      if (this.last.dirY > 0) {\n                        // moving item down\n                        this._moveElement(this.placeholder, {\n                          parent: item.lastElementChild,\n                          type: \"insertBefore\",\n                          sibling: item.lastElementChild.firstElementChild,\n                          animatable: item.querySelector(\".\".concat(this.config.classes.content))\n                        });\n                      } else if (this.last.dirY < 0) {\n                        // moving item up\n                        this._moveElement(this.placeholder, {\n                          parent: item.parentNode,\n                          type: \"insertBefore\",\n                          sibling: item,\n                          animatable: item.querySelector(\".\".concat(this.config.classes.content))\n                        });\n                      }\n\n                      this.emit(\"reorder\");\n                    } else {\n                      // item is not a parent\n                      if (this.last.dirY > 0) {\n                        // moving item down\n                        var _nextEl = item.nextElementSibling;\n\n                        if (_nextEl) {\n                          // item has an item below it\n                          this._moveElement(this.placeholder, {\n                            parent: item.parentNode,\n                            type: \"insertBefore\",\n                            sibling: _nextEl,\n                            animatable: item.querySelector(\".\".concat(this.config.classes.content))\n                          });\n                        } else {\n                          // item is last in list\t\t\t\t\n                          this._moveElement(this.placeholder, {\n                            parent: item.closest(this.config.nodes.list),\n                            type: \"appendChild\",\n                            animatable: item.querySelector(\".\".concat(this.config.classes.content))\n                          });\n                        }\n                      } else if (this.last.dirY < 0) {\n                        // moving item up\n                        this._moveElement(this.placeholder, {\n                          parent: item.parentNode,\n                          type: \"insertBefore\",\n                          sibling: item,\n                          animatable: item.querySelector(\".\".concat(this.config.classes.content))\n                        });\n                      }\n\n                      this.emit(\"reorder\");\n                    }\n                  }\n                }\n\n                var _parentEl2 = item.closest(\".\".concat(this.config.classes.parent));\n\n                if (_parentEl2) {\n                  if (_parentEl2 !== this.parent) {\n                    if (_parentEl2._nestable) {\n                      this.newParent = _parentEl2;\n                    }\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n        }\n\n        this.placeholder.classList.toggle(this.config.classes.error, this.active.disabledParent || this.active.maxDepth || this.active.collapsedParent || this.active.confinedParent);\n        var mx = e.pageX - this.origin.original.x;\n        var my = e.pageY - this.origin.original.y; // item movement is confined\n\n        if (this.active.axis) {\n          if (this.active.axis === \"x\") {\n            my = 0;\n          } else if (this.active.axis === \"y\") {\n            mx = 0;\n          }\n        }\n\n        this.container.style.transform = \"translate3d(\".concat(mx, \"px, \").concat(my, \"px, 0)\");\n        this.lastParent = this.placeholder.parentNode;\n        this.hierarchy.newParent = this.lastParent;\n        this.hierarchy.newParentItem = this.lastParent.closest(\".\".concat(this.config.classes.item));\n        this.emit(\"move\", this.active);\n      }\n\n      this.last = {\n        x: e.pageX,\n        y: e.pageY\n      };\n    }\n  }, {\n    key: \"_moveElement\",\n    value: function _moveElement(el, type) {\n      var ppos = false;\n      var ipos = false; // prevent moving if item has disabled parents\n\n      if (this._isDisabled(type.parent) || this._isDisabled(type.parent.closest(\".\".concat(this.config.classes.item)))) {\n        return false;\n      } // prevent moving if item is confined to parent with data-nestable-parent\n\n\n      if (this.active.parent) {\n        if (!_utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parents(type.parent, \"#\".concat(this.active.parent.id)).includes(this.active.parent)) {\n          if (!this.active.confinedParent) {\n            this.emit(\"error.confined\", el, this.active.parent, type.parent);\n            this.active.confinedParent = true;\n          }\n\n          return false;\n        }\n      }\n\n      var listEl = el.closest(this.config.nodes.list); // if animation is enabled, we need to get the original position of the element first\n\n      if (this.config.animation > 0) {\n        ppos = _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rect(this.placeholder);\n\n        if (type.animatable) {\n          ipos = _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rect(type.animatable);\n        }\n      }\n\n      if (type.type === \"insertBefore\") {\n        type.parent.insertBefore(el, type.sibling);\n      } else if (type.type === \"appendChild\") {\n        type.parent.appendChild(el);\n      }\n\n      if (!listEl.childElementCount) {\n        this._unmakeParent(listEl.parentNode);\n      }\n\n      this.emit(\"order.change\", this.active.node, type.parent, listEl); // animate the elements\n\n      if (this.config.animation > 0) {\n        this._animateElement(this.placeholder, ppos);\n\n        if (type.animatable && ipos) {\n          this._animateElement(type.animatable, ipos);\n        }\n      }\n    }\n  }, {\n    key: \"_animateElement\",\n    value: function _animateElement(el, obj) {\n      // Animate an element's change in position\n      // caused by a change in the DOM order\n      var css = el.style; // Get the node's positon AFTER the change\n\n      var r = _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rect(el); // Calculate the difference in position\n\n      var x = obj.left - r.left;\n      var y = obj.top - r.top; // Move the node to it's original position before the DOM change\n\n      css.transform = \"translate3d(\".concat(x, \"px, \").concat(y, \"px, 0px)\"); // css.zIndex = 10000;\n      // Trigger a repaint so the next bit works\n\n      this._repaint(el); // Reset the transform, but add a transition so it's smooth\n\n\n      css.transform = \"translate3d(0px, 0px, 0px)\";\n      css.transition = \"transform \".concat(this.config.animation, \"ms\"); // Reset the style\n\n      setTimeout(function () {\n        // console.log(\"foo\")\n        // css.zIndex = \"\";\n        css.transform = \"\";\n        css.transition = \"\";\n      }, this.config.animation);\n    }\n  }, {\n    key: \"_repaint\",\n    value: function _repaint(el) {\n      return el.offsetHeight;\n    }\n  }, {\n    key: \"_onMouseUp\",\n    value: function _onMouseUp(e) {\n      if (this.active) {\n        if (this.config.showPlaceholderOnMove) {\n          this.placeholder.style.opacity = 0;\n        }\n\n        e = this._getEvent(e);\n        var prect = _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rect(this.active.node); // this.active.node.removeAttribute(\"style\");\n\n        this.container.removeAttribute(\"style\");\n        this.parent.classList.remove(this.config.classes.moving);\n        this.placeholder.parentNode.replaceChild(this.active.node, this.placeholder);\n\n        this._animateElement(this.active.node, prect);\n\n        this.placeholder.classList.remove(this.config.classes.error);\n        this.active.node.classList.remove(this.config.classes.dragging);\n        this.active = false;\n        document.body.removeChild(this.container);\n\n        this._getData();\n\n        if (this.newParent) {\n          this.hierarchy.newInstance = this.newParent._nestable;\n\n          this.newParent._nestable._getData();\n        }\n\n        this.hierarchy.hierarchy = this.data;\n        this.emit(\"stop\", this.hierarchy);\n        this.update();\n      }\n    }\n  }, {\n    key: \"_toggleList\",\n    value: function _toggleList(item, btn) {\n      if (!item.classList.contains(this.config.classes.collapsed)) {\n        this._collapseList(item, btn);\n      } else {\n        this._expandList(item, btn);\n      }\n    }\n  }, {\n    key: \"_collapseList\",\n    value: function _collapseList(item, btn) {\n      if (!btn) {\n        btn = item.querySelector(\".\".concat(this.config.classes.button));\n      }\n\n      btn.textContent = this.config.expandButtonContent;\n      item.classList.add(this.config.classes.collapsed);\n      this.emit(\"list.collapse\", item);\n    }\n  }, {\n    key: \"_expandList\",\n    value: function _expandList(item, btn) {\n      if (!btn) {\n        btn = item.querySelector(\".\".concat(this.config.classes.button));\n      }\n\n      btn.textContent = this.config.collapseButtonContent;\n      item.classList.remove(this.config.classes.collapsed);\n      this.emit(\"list.expand\", item);\n    }\n  }, {\n    key: \"_makeParent\",\n    value: function _makeParent(el) {\n      var parentEl = el.querySelector(this.config.nodes.list);\n\n      if (!parentEl) {\n        parentEl = document.createElement(this.config.nodes.list);\n        parentEl.classList.add(this.config.classes.list);\n        el.appendChild(parentEl);\n      } else {\n        parentEl.classList.add(this.config.classes.list);\n      }\n\n      var button = document.createElement(\"button\");\n      button.classList.add(this.config.classes.button);\n      button.type = \"button\";\n      button.textContent = this.config.collapseButtonContent;\n      el.insertBefore(button, el.firstElementChild);\n      return parentEl;\n    }\n  }, {\n    key: \"_unmakeParent\",\n    value: function _unmakeParent(el) {\n      var list = el.querySelector(this.config.nodes.list);\n      var btn = el.querySelector(\"button\");\n\n      if (list) {\n        el.removeChild(list);\n      }\n\n      if (btn) {\n        el.removeChild(btn);\n      }\n\n      return;\n    }\n  }, {\n    key: \"_getData\",\n    value: function _getData() {\n      var _this5 = this;\n\n      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"nodes\";\n      var data = [];\n\n      var step = function step(level) {\n        var array = [];\n        var items = _utils_DOM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].children(level, _this5.config.nodes.item);\n        items.forEach(function (li) {\n          var item = {};\n\n          if (type === \"nodes\") {\n            item.node = li;\n          } else {\n            item.data = Object.assign({}, li.dataset);\n\n            if (_this5.config.includeContent) {\n              var content = li.querySelector(\".\".concat(_this5.config.classes.content));\n\n              if (content) {\n                item.content = content.innerHTML;\n              }\n            }\n          }\n\n          var sub = li.querySelector(_this5.config.nodes.list);\n\n          if (sub) {\n            item.children = step(sub);\n          }\n\n          array.push(item);\n        });\n        return array;\n      };\n\n      data = step(this.parent);\n\n      if (type === \"nodes\") {\n        this.data = data;\n      }\n\n      return data;\n    }\n  }]);\n\n  return Nestable;\n}(_utils_Emitter_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/plugins/nestable/src/index.js\n");

/***/ }),

/***/ "./resources/js/plugins/nestable/src/utils/DOM.js":
/*!********************************************************!*\
  !*** ./resources/js/plugins/nestable/src/utils/DOM.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar DOM = {\n  select: function select(selector) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n    return parent.querySelector(selector);\n  },\n  selectAll: function selectAll(selector) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n    return parent.querySelectorAll(selector);\n  },\n\n  /**\n  * Get an elements children that match the selector\n  * @param  {Node} elem The base element\n  * @param  {String} selector CSS3 selector string\n  * @return {Array}\n  */\n  children: function children(elem, selector) {\n    var arr = [];\n    var children = elem.children;\n    var l = children.length;\n\n    for (var i = 0; i < l; ++i) {\n      var child = children[i];\n\n      if (child.matches(selector)) {\n        arr.push(child);\n      }\n    }\n\n    return arr;\n  },\n\n  /**\n  * Get all DOM element up the tree that match the selector\n  * @param  {Node} elem The base element\n  * @param  {String} selector CSS3 selector string\n  * @return {Array}\n  */\n  parents: function parents(elem, selector) {\n    // Set up a parent array\n    var parents = []; // Push each parent element to the array\n\n    for (; elem && elem !== document; elem = elem.parentNode) {\n      if (selector) {\n        if (elem.matches(selector)) {\n          parents.push(elem);\n        }\n\n        continue;\n      }\n\n      parents.push(elem);\n    } // Return our parent array\n\n\n    return parents;\n  },\n\n  /**\n  * Get an element's DOMRect relative to the document instead of the viewport.\n  * @param  {Object} el  HTMLElement\n  * @return {Object}     Formatted DOMRect copy\n  */\n  rect: function rect(el) {\n    var w = window,\n        st = w.pageYOffset !== undefined ? w.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop,\n        o = el.getBoundingClientRect(),\n        x = w.pageXOffset,\n        y = st;\n    return {\n      left: o.left + x,\n      top: o.top + y,\n      height: o.height,\n      width: o.width\n    };\n  }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DOM);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvcGx1Z2lucy9uZXN0YWJsZS9zcmMvdXRpbHMvRE9NLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFNQSxHQUFHLEdBQUc7RUFDUkMsTUFBTSxFQUFFLGdCQUFDQyxRQUFELEVBQWlDO0lBQUEsSUFBdEJDLE1BQXNCLHVFQUFiQyxRQUFhO0lBQ3JDLE9BQU9ELE1BQU0sQ0FBQ0UsYUFBUCxDQUFxQkgsUUFBckIsQ0FBUDtFQUNILENBSE87RUFJUkksU0FBUyxFQUFFLG1CQUFDSixRQUFELEVBQWlDO0lBQUEsSUFBdEJDLE1BQXNCLHVFQUFiQyxRQUFhO0lBQ3hDLE9BQU9ELE1BQU0sQ0FBQ0ksZ0JBQVAsQ0FBd0JMLFFBQXhCLENBQVA7RUFDSCxDQU5POztFQU9SO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJTSxRQUFRLEVBQUUsa0JBQUNDLElBQUQsRUFBT1AsUUFBUCxFQUFvQjtJQUMxQixJQUFNUSxHQUFHLEdBQUcsRUFBWjtJQUNBLElBQU1GLFFBQVEsR0FBR0MsSUFBSSxDQUFDRCxRQUF0QjtJQUNBLElBQU1HLENBQUMsR0FBR0gsUUFBUSxDQUFDSSxNQUFuQjs7SUFDQSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLENBQXBCLEVBQXVCLEVBQUVFLENBQXpCLEVBQTJCO01BQ3ZCLElBQU1DLEtBQUssR0FBR04sUUFBUSxDQUFDSyxDQUFELENBQXRCOztNQUNBLElBQUlDLEtBQUssQ0FBQ0MsT0FBTixDQUFjYixRQUFkLENBQUosRUFBNEI7UUFDeEJRLEdBQUcsQ0FBQ00sSUFBSixDQUFTRixLQUFUO01BQ0g7SUFDSjs7SUFDRCxPQUFPSixHQUFQO0VBQ0gsQ0F4Qk87O0VBeUJSO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJTyxPQUFPLEVBQUUsaUJBQUNSLElBQUQsRUFBT1AsUUFBUCxFQUFvQjtJQUN6QjtJQUNBLElBQUllLE9BQU8sR0FBRyxFQUFkLENBRnlCLENBSXpCOztJQUNBLE9BQVFSLElBQUksSUFBSUEsSUFBSSxLQUFLTCxRQUF6QixFQUFtQ0ssSUFBSSxHQUFHQSxJQUFJLENBQUNTLFVBQS9DLEVBQTREO01BQ3hELElBQUloQixRQUFKLEVBQWM7UUFDVixJQUFJTyxJQUFJLENBQUNNLE9BQUwsQ0FBYWIsUUFBYixDQUFKLEVBQTRCO1VBQ3hCZSxPQUFPLENBQUNELElBQVIsQ0FBYVAsSUFBYjtRQUNIOztRQUNEO01BQ0g7O01BQ0RRLE9BQU8sQ0FBQ0QsSUFBUixDQUFhUCxJQUFiO0lBQ0gsQ0Fid0IsQ0FlekI7OztJQUNBLE9BQU9RLE9BQVA7RUFDSCxDQWhETzs7RUFpRFI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtFQUNJRSxJQXREUSxnQkFzREhDLEVBdERHLEVBc0RDO0lBQ0QsSUFBSUMsQ0FBQyxHQUFHQyxNQUFSO0lBQUEsSUFDUUMsRUFBRSxHQUFJRixDQUFDLENBQUNHLFdBQUYsS0FBa0JDLFNBQW5CLEdBQWdDSixDQUFDLENBQUNHLFdBQWxDLEdBQWdELENBQUNwQixRQUFRLENBQUNzQixlQUFULElBQTRCdEIsUUFBUSxDQUFDdUIsSUFBVCxDQUFjVCxVQUExQyxJQUF3RGQsUUFBUSxDQUFDdUIsSUFBbEUsRUFBd0VDLFNBRHJJO0lBQUEsSUFFUUMsQ0FBQyxHQUFHVCxFQUFFLENBQUNVLHFCQUFILEVBRlo7SUFBQSxJQUdRQyxDQUFDLEdBQUdWLENBQUMsQ0FBQ1csV0FIZDtJQUFBLElBSVFDLENBQUMsR0FBR1YsRUFKWjtJQUtBLE9BQU87TUFDQ1csSUFBSSxFQUFFTCxDQUFDLENBQUNLLElBQUYsR0FBU0gsQ0FEaEI7TUFFQ0ksR0FBRyxFQUFFTixDQUFDLENBQUNNLEdBQUYsR0FBUUYsQ0FGZDtNQUdDRyxNQUFNLEVBQUVQLENBQUMsQ0FBQ08sTUFIWDtNQUlDQyxLQUFLLEVBQUVSLENBQUMsQ0FBQ1E7SUFKVixDQUFQO0VBTVA7QUFsRU8sQ0FBWjtBQXFFQSxpRUFBZXJDLEdBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcGx1Z2lucy9uZXN0YWJsZS9zcmMvdXRpbHMvRE9NLmpzPzkwYmQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRE9NID0ge1xuICAgIHNlbGVjdDogKHNlbGVjdG9yLCBwYXJlbnQgPSBkb2N1bWVudCkgPT4ge1xuICAgICAgICByZXR1cm4gcGFyZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIH0sXG4gICAgc2VsZWN0QWxsOiAoc2VsZWN0b3IsIHBhcmVudCA9IGRvY3VtZW50KSA9PiB7XG4gICAgICAgIHJldHVybiBwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgfSxcdFxuICAgIC8qKlxuICAgICogR2V0IGFuIGVsZW1lbnRzIGNoaWxkcmVuIHRoYXQgbWF0Y2ggdGhlIHNlbGVjdG9yXG4gICAgKiBAcGFyYW0gIHtOb2RlfSBlbGVtIFRoZSBiYXNlIGVsZW1lbnRcbiAgICAqIEBwYXJhbSAge1N0cmluZ30gc2VsZWN0b3IgQ1NTMyBzZWxlY3RvciBzdHJpbmdcbiAgICAqIEByZXR1cm4ge0FycmF5fVxuICAgICovXHRcbiAgICBjaGlsZHJlbjogKGVsZW0sIHNlbGVjdG9yKSA9PiB7XG4gICAgICAgIGNvbnN0IGFyciA9IFtdO1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IGVsZW0uY2hpbGRyZW47XG4gICAgICAgIGNvbnN0IGwgPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgICBpZiAoY2hpbGQubWF0Y2hlcyhzZWxlY3Rvcikpe1xuICAgICAgICAgICAgICAgIGFyci5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyO1xuICAgIH0sXG4gICAgLyoqXG4gICAgKiBHZXQgYWxsIERPTSBlbGVtZW50IHVwIHRoZSB0cmVlIHRoYXQgbWF0Y2ggdGhlIHNlbGVjdG9yXG4gICAgKiBAcGFyYW0gIHtOb2RlfSBlbGVtIFRoZSBiYXNlIGVsZW1lbnRcbiAgICAqIEBwYXJhbSAge1N0cmluZ30gc2VsZWN0b3IgQ1NTMyBzZWxlY3RvciBzdHJpbmdcbiAgICAqIEByZXR1cm4ge0FycmF5fVxuICAgICovXG4gICAgcGFyZW50czogKGVsZW0sIHNlbGVjdG9yKSA9PiB7XG4gICAgICAgIC8vIFNldCB1cCBhIHBhcmVudCBhcnJheVxuICAgICAgICB2YXIgcGFyZW50cyA9IFtdO1xuXG4gICAgICAgIC8vIFB1c2ggZWFjaCBwYXJlbnQgZWxlbWVudCB0byB0aGUgYXJyYXlcbiAgICAgICAgZm9yICggOyBlbGVtICYmIGVsZW0gIT09IGRvY3VtZW50OyBlbGVtID0gZWxlbS5wYXJlbnROb2RlICkge1xuICAgICAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW0ubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50cy5wdXNoKGVsZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudHMucHVzaChlbGVtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJldHVybiBvdXIgcGFyZW50IGFycmF5XG4gICAgICAgIHJldHVybiBwYXJlbnRzO1xuICAgIH0sXHRcbiAgICAvKipcbiAgICAqIEdldCBhbiBlbGVtZW50J3MgRE9NUmVjdCByZWxhdGl2ZSB0byB0aGUgZG9jdW1lbnQgaW5zdGVhZCBvZiB0aGUgdmlld3BvcnQuXG4gICAgKiBAcGFyYW0gIHtPYmplY3R9IGVsICBIVE1MRWxlbWVudFxuICAgICogQHJldHVybiB7T2JqZWN0fSAgICAgRm9ybWF0dGVkIERPTVJlY3QgY29weVxuICAgICovXG4gICAgcmVjdChlbCkge1xuICAgICAgICAgICAgdmFyIHcgPSB3aW5kb3csXG4gICAgICAgICAgICAgICAgICAgIHN0ID0gKHcucGFnZVlPZmZzZXQgIT09IHVuZGVmaW5lZCkgPyB3LnBhZ2VZT2Zmc2V0IDogKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUgfHwgZG9jdW1lbnQuYm9keSkuc2Nyb2xsVG9wLFxuICAgICAgICAgICAgICAgICAgICBvID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgICAgICAgICAgIHggPSB3LnBhZ2VYT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICB5ID0gc3Q7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBvLmxlZnQgKyB4LFxuICAgICAgICAgICAgICAgICAgICB0b3A6IG8udG9wICsgeSxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBvLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IG8ud2lkdGhcbiAgICAgICAgICAgIH07XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgRE9NOyJdLCJuYW1lcyI6WyJET00iLCJzZWxlY3QiLCJzZWxlY3RvciIsInBhcmVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInNlbGVjdEFsbCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjaGlsZHJlbiIsImVsZW0iLCJhcnIiLCJsIiwibGVuZ3RoIiwiaSIsImNoaWxkIiwibWF0Y2hlcyIsInB1c2giLCJwYXJlbnRzIiwicGFyZW50Tm9kZSIsInJlY3QiLCJlbCIsInciLCJ3aW5kb3ciLCJzdCIsInBhZ2VZT2Zmc2V0IiwidW5kZWZpbmVkIiwiZG9jdW1lbnRFbGVtZW50IiwiYm9keSIsInNjcm9sbFRvcCIsIm8iLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ4IiwicGFnZVhPZmZzZXQiLCJ5IiwibGVmdCIsInRvcCIsImhlaWdodCIsIndpZHRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/plugins/nestable/src/utils/DOM.js\n");

/***/ }),

/***/ "./resources/js/plugins/nestable/src/utils/Emitter.js":
/*!************************************************************!*\
  !*** ./resources/js/plugins/nestable/src/utils/Emitter.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Emitter)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar Emitter = /*#__PURE__*/function () {\n  function Emitter() {\n    _classCallCheck(this, Emitter);\n  }\n\n  _createClass(Emitter, [{\n    key: \"on\",\n    value:\n    /**\n    * Add custom event listener\n    * @param  {String} event\n    * @param  {Function} callback\n    * @return {Void}\n    */\n    function on(listener, fn, capture) {\n      if (typeof listener === \"string\") {\n        this.listeners = this.listeners || {};\n        this.listeners[listener] = this.listeners[listener] || [];\n        this.listeners[listener].push(fn);\n      } else {\n        arguments[0].addEventListener(arguments[1], arguments[2], false);\n      }\n    }\n    /**\n    * Remove custom listener listener\n    * @param  {String} listener\n    * @param  {Function} callback\n    * @return {Void}\n    */\n\n  }, {\n    key: \"off\",\n    value: function off(listener, fn) {\n      if (typeof listener === \"string\") {\n        this.listeners = this.listeners || {};\n        if (listener in this.listeners === false) return;\n        this.listeners[listener].splice(this.listeners[listener].indexOf(fn), 1);\n      } else {\n        arguments[0].removeEventListener(arguments[1], arguments[2]);\n      }\n    }\n    /**\n    * Fire custom listener\n    * @param  {String} listener\n    * @return {Void}\n    */\n\n  }, {\n    key: \"emit\",\n    value: function emit(listener) {\n      this.listeners = this.listeners || {};\n      if (listener in this.listeners === false) return;\n\n      for (var i = 0; i < this.listeners[listener].length; i++) {\n        this.listeners[listener][i].apply(this, Array.prototype.slice.call(arguments, 1));\n      }\n    }\n  }]);\n\n  return Emitter;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvcGx1Z2lucy9uZXN0YWJsZS9zcmMvdXRpbHMvRW1pdHRlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQXFCQTs7Ozs7Ozs7SUFFakI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ0ksWUFBR0MsUUFBSCxFQUFhQyxFQUFiLEVBQWlCQyxPQUFqQixFQUEwQjtNQUNsQixJQUFJLE9BQU9GLFFBQVAsS0FBb0IsUUFBeEIsRUFBa0M7UUFDMUIsS0FBS0csU0FBTCxHQUFpQixLQUFLQSxTQUFMLElBQWtCLEVBQW5DO1FBQ0EsS0FBS0EsU0FBTCxDQUFlSCxRQUFmLElBQTJCLEtBQUtHLFNBQUwsQ0FBZUgsUUFBZixLQUE0QixFQUF2RDtRQUNBLEtBQUtHLFNBQUwsQ0FBZUgsUUFBZixFQUF5QkksSUFBekIsQ0FBOEJILEVBQTlCO01BQ1AsQ0FKRCxNQUlPO1FBQ0NJLFNBQVMsQ0FBQyxDQUFELENBQVQsQ0FBYUMsZ0JBQWIsQ0FBOEJELFNBQVMsQ0FBQyxDQUFELENBQXZDLEVBQTRDQSxTQUFTLENBQUMsQ0FBRCxDQUFyRCxFQUEwRCxLQUExRDtNQUNQO0lBQ1I7SUFFRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7V0FDSSxhQUFJTCxRQUFKLEVBQWNDLEVBQWQsRUFBa0I7TUFDVixJQUFJLE9BQU9ELFFBQVAsS0FBb0IsUUFBeEIsRUFBa0M7UUFDMUIsS0FBS0csU0FBTCxHQUFpQixLQUFLQSxTQUFMLElBQWtCLEVBQW5DO1FBQ0EsSUFBSUgsUUFBUSxJQUFJLEtBQUtHLFNBQWpCLEtBQStCLEtBQW5DLEVBQTBDO1FBQzFDLEtBQUtBLFNBQUwsQ0FBZUgsUUFBZixFQUF5Qk8sTUFBekIsQ0FBZ0MsS0FBS0osU0FBTCxDQUFlSCxRQUFmLEVBQXlCUSxPQUF6QixDQUFpQ1AsRUFBakMsQ0FBaEMsRUFBc0UsQ0FBdEU7TUFDUCxDQUpELE1BSU87UUFDQ0ksU0FBUyxDQUFDLENBQUQsQ0FBVCxDQUFhSSxtQkFBYixDQUFpQ0osU0FBUyxDQUFDLENBQUQsQ0FBMUMsRUFBK0NBLFNBQVMsQ0FBQyxDQUFELENBQXhEO01BQ1A7SUFDUjtJQUVEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7Ozs7V0FDSSxjQUFLTCxRQUFMLEVBQWU7TUFDUCxLQUFLRyxTQUFMLEdBQWlCLEtBQUtBLFNBQUwsSUFBa0IsRUFBbkM7TUFDQSxJQUFJSCxRQUFRLElBQUksS0FBS0csU0FBakIsS0FBK0IsS0FBbkMsRUFBMEM7O01BQzFDLEtBQUssSUFBSU8sQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxLQUFLUCxTQUFMLENBQWVILFFBQWYsRUFBeUJXLE1BQTdDLEVBQXFERCxDQUFDLEVBQXRELEVBQTBEO1FBQ2xELEtBQUtQLFNBQUwsQ0FBZUgsUUFBZixFQUF5QlUsQ0FBekIsRUFBNEJFLEtBQTVCLENBQWtDLElBQWxDLEVBQXdDQyxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQlgsU0FBM0IsRUFBc0MsQ0FBdEMsQ0FBeEM7TUFDUDtJQUNSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL3BsdWdpbnMvbmVzdGFibGUvc3JjL3V0aWxzL0VtaXR0ZXIuanM/NTgwYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBFbWl0dGVyIHtcblx0XG4gICAgLyoqXG4gICAgKiBBZGQgY3VzdG9tIGV2ZW50IGxpc3RlbmVyXG4gICAgKiBAcGFyYW0gIHtTdHJpbmd9IGV2ZW50XG4gICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgKi9cbiAgICBvbihsaXN0ZW5lciwgZm4sIGNhcHR1cmUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycyB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnNbbGlzdGVuZXJdID0gdGhpcy5saXN0ZW5lcnNbbGlzdGVuZXJdIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3RlbmVyc1tsaXN0ZW5lcl0ucHVzaChmbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNbMF0uYWRkRXZlbnRMaXN0ZW5lcihhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICogUmVtb3ZlIGN1c3RvbSBsaXN0ZW5lciBsaXN0ZW5lclxuICAgICogQHBhcmFtICB7U3RyaW5nfSBsaXN0ZW5lclxuICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICovXG4gICAgb2ZmKGxpc3RlbmVyLCBmbikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICBpZiAobGlzdGVuZXIgaW4gdGhpcy5saXN0ZW5lcnMgPT09IGZhbHNlKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzW2xpc3RlbmVyXS5zcGxpY2UodGhpcy5saXN0ZW5lcnNbbGlzdGVuZXJdLmluZGV4T2YoZm4pLCAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c1swXS5yZW1vdmVFdmVudExpc3RlbmVyKGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgICAgICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEZpcmUgY3VzdG9tIGxpc3RlbmVyXG4gICAgKiBAcGFyYW0gIHtTdHJpbmd9IGxpc3RlbmVyXG4gICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICovXG4gICAgZW1pdChsaXN0ZW5lcikge1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycyB8fCB7fTtcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lciBpbiB0aGlzLmxpc3RlbmVycyA9PT0gZmFsc2UpIHJldHVybjtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5saXN0ZW5lcnNbbGlzdGVuZXJdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzW2xpc3RlbmVyXVtpXS5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICAgICAgICAgIH1cbiAgICB9XHRcbn0iXSwibmFtZXMiOlsiRW1pdHRlciIsImxpc3RlbmVyIiwiZm4iLCJjYXB0dXJlIiwibGlzdGVuZXJzIiwicHVzaCIsImFyZ3VtZW50cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJzcGxpY2UiLCJpbmRleE9mIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImkiLCJsZW5ndGgiLCJhcHBseSIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/plugins/nestable/src/utils/Emitter.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/plugins/nestable/script.js");
/******/ 	
/******/ })()
;